<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!-- 声明，注册SpringMVC的核心对象DispatcherServlet
        需要在tomcat服务器启动后，创建DispatcherServlet对象的实例
            因为DispatcherServlet在创建过程中，会同时创建springMVC容器的对象，读取SpringMVC
            的配置文件，将配置文件中的对象都创建好，当用户发起请求时就可以直接使用了

        在DispatcherServlet的初始化方法中：创建spring容器对象并放入ServletContext域中
        WebApplicationContext app = new ClasspathApplicationContext("spring.xml");
        getServletContext.setAttribute(key,app);
    -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--tomcat服务器启动后DispatcherServlet会从默认位置读取spring配置文件。
    需要自定义springmvc读取配置文件的位置-->
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

        <!-- load-on-startup表示tomcat服务器启动后创建对象的顺序。
            它的值是大于等于0的证书，数值越小，优先级越高。
            告诉tomcat服务器启动后最先创建DispatcherServlet
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>springmvc</servlet-name>
        <!--
        使用框架时，url-pattern可以使用两种值：
            1.使用扩展名：*.xxx,xxx为自定义的扩展名。例如 *.do,*.action,*.mvc等
                访问以xxx为扩展名结尾的资源时，交给DispatcherServlet处理
            2.使用斜杠 /
        -->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>
</web-app>